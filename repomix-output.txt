This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-21T19:58:06.798Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
migrations/
  alembic.ini
  env.py
  README
  script.py.mako
templates/
  dashboard.html
  email.html
  login.html
  signup.html
  twofa.html
app.py
random.txt

================================================================
Repository Files
================================================================

================
File: migrations/alembic.ini
================
# A generic, single database configuration.

[alembic]
# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false


# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic,flask_migrate

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_flask_migrate]
level = INFO
handlers =
qualname = flask_migrate

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

================
File: migrations/env.py
================
import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

================
File: migrations/README
================
Single-database configuration for Flask.

================
File: migrations/script.py.mako
================
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}

================
File: templates/dashboard.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Prediction Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { transform: translateX(-50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes gradientFlow {
            0% { background-position: 0 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0 50%; }
        }

        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientFlow 15s ease infinite;
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-out;
        }

        .animate-slide-in {
            animation: slideIn 0.5s ease-out;
        }

        .input-transition {
            transition: all 0.3s ease;
        }

        .input-transition:focus {
            transform: scale(1.02);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
        }

        .button-transition {
            transition: all 0.3s ease;
        }

        .button-transition:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .glass-effect {
            background: rgba(255, 255, 255, 0.25);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
    </style>
</head>
<body class="min-h-screen text-white">
    <div class="container mx-auto p-4">
        <div class="flex justify-between items-center mb-4 animate-fade-in">
            <h1 class="text-3xl font-bold">Stock Prediction Dashboard</h1>
            <button id="logout-btn" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 button-transition">Logout</button>
        </div>
        <form id="stock-form" class="mb-8 glass-effect p-4 rounded-lg animate-fade-in" style="animation-delay: 0.1s;">
            <div class="flex space-x-4">
                <div class="flex-1">
                    <label for="symbol" class="block text-white">Stock Symbol</label>
                    <input type="text" id="symbol" name="symbol" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
                </div>
                <div class="flex-none">
                    <label class="block text-white">&nbsp;</label>
                    <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 button-transition">Get Price & Predict</button>
                </div>
            </div>
        </form>
        <div id="error-message" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 hidden animate-fade-in" role="alert">
            <span class="block sm:inline" id="error-text"></span>
        </div>
        <div id="loading" class="text-center mb-4 hidden animate-fade-in">
            <svg class="animate-spin h-5 w-5 mr-3 inline-block" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Loading...
        </div>
        <div id="results" class="glass-effect p-4 rounded-lg shadow-md hidden animate-fade-in" style="animation-delay: 0.2s;">
            <h2 class="text-xl font-bold mb-2">Results</h2>
            <p>Symbol: <span id="result-symbol" class="font-bold"></span></p>
            <p>Current Price: $<span id="result-current-price"></span></p>
            <p>Predicted Price: $<span id="predicted-price"></span></p>
            <p>Profit Percentage: <span id="profit-percentage"></span>%</p>
            <p>Recommendation: <span id="recommendation" class="font-bold"></span></p>
            <p>Market Status: <span id="market-status"></span></p>
            <p id="last-trading-time" class="hidden">Last Trading Time: <span></span></p>
            <button id="favorite-btn" class="mt-4 bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 button-transition">Add to Favorites</button>
        </div>
        <div class="glass-effect p-4 rounded-lg mt-8 animate-fade-in" style="animation-delay: 0.3s;">
            <canvas id="price-chart"></canvas>
        </div>

        <div id="watchlist" class="mt-8 glass-effect p-4 rounded-lg animate-fade-in" style="animation-delay: 0.4s;">
            <h2 class="text-2xl font-bold mb-4">Watchlist</h2>
            <ul id="watchlist-items" class="space-y-2"></ul>
        </div>
    </div>
    <script>
       const stockForm = document.getElementById('stock-form');
        const results = document.getElementById('results');
        const errorMessage = document.getElementById('error-message');
        const errorText = document.getElementById('error-text');
        const loading = document.getElementById('loading');
        const logoutBtn = document.getElementById('logout-btn');
        const favoriteBtn = document.getElementById('favorite-btn');
        const watchlistItems = document.getElementById('watchlist-items');
        const ctx = document.getElementById('price-chart').getContext('2d');
        let chart;
        let updateInterval;
        let favorites = JSON.parse(localStorage.getItem('favorites')) || [];

        logoutBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/logout', {
                    method: 'GET'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                window.location.href = '/login';
            } catch (error) {
                showError('Logout failed: ' + error.message);
            }
        });

        favoriteBtn.addEventListener('click', () => {
            const symbol = document.getElementById('result-symbol').textContent;
            if (!favorites.includes(symbol)) {
                favorites.push(symbol);
                localStorage.setItem('favorites', JSON.stringify(favorites));
                updateWatchlist();
                favoriteBtn.textContent = 'Remove from Favorites';
            } else {
                favorites = favorites.filter(fav => fav !== symbol);
                localStorage.setItem('favorites', JSON.stringify(favorites));
                updateWatchlist();
                favoriteBtn.textContent = 'Add to Favorites';
            }
        });

        function updateWatchlist() {
            watchlistItems.innerHTML = '';
            favorites.forEach(symbol => {
                const li = document.createElement('li');
                li.className = 'flex justify-between items-center bg-white p-2 rounded shadow';
                li.innerHTML = `
                    <span>${symbol}</span>
                    <button class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600" onclick="getStockInfo('${symbol}')">View</button>
                `;
                watchlistItems.appendChild(li);
            });
        }

        async function getStockInfo(symbol) {
            const formData = new FormData();
            formData.append('symbol', symbol);
            await fetchStockData(formData);
        }

        stockForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(stockForm);
            await fetchStockData(formData);
        });

        async function fetchStockData(formData) {
            loading.classList.remove('hidden');
            results.classList.add('hidden');
            errorMessage.classList.add('hidden');

            try {
                const response = await fetch('/get_price_and_predict', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.error) {
                    throw new Error(data.error);
                }

                updateStockInfo(data);
                results.classList.remove('hidden');


                if (updateInterval) {
                    clearInterval(updateInterval);
                }


                updateInterval = setInterval(updateCurrentPrice, 10000);

            } catch (error) {
                showError(error.message);
            } finally {
                loading.classList.add('hidden');
            }
        }

        function updateStockInfo(data) {
            document.getElementById('result-symbol').textContent = data.symbol;
            document.getElementById('result-current-price').textContent = data.current_price.toFixed(2);
            document.getElementById('predicted-price').textContent = data.predicted_price.toFixed(2);
            document.getElementById('profit-percentage').textContent = data.profit_percentage.toFixed(2);
            document.getElementById('recommendation').textContent = data.recommendation;
            document.getElementById('market-status').textContent = data.market_status;
            document.getElementById('market-status').className = data.market_status === 'open' ? 'text-green-600 font-bold' : 'text-red-600 font-bold';


            favoriteBtn.textContent = favorites.includes(data.symbol) ? 'Remove from Favorites' : 'Add to Favorites';


            const recommendationElement = document.getElementById('recommendation');
            if (data.recommendation === 'BUY') {
                recommendationElement.className = 'font-bold text-green-600';
            } else if (data.recommendation === 'SELL') {
                recommendationElement.className = 'font-bold text-red-600';
            } else {
                recommendationElement.className = 'font-bold text-yellow-600';
            }

            const lastTradingTimeElement = document.getElementById('last-trading-time');
            if (data.market_status === 'closed') {
                lastTradingTimeElement.classList.remove('hidden');
                lastTradingTimeElement.querySelector('span').textContent = data.last_trading_time;
            } else {
                lastTradingTimeElement.classList.add('hidden');
            }

            updateChart(data.current_price, data.predicted_price);
        }

        function updateChart(currentPrice, predictedPrice) {
            if (chart) {
                chart.destroy();
            }

            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Current', 'Predicted'],
                    datasets: [{
                        label: 'Price',
                        data: [currentPrice, predictedPrice],
                        backgroundColor: [
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(255, 99, 132, 0.2)'
                        ],
                        borderColor: [
                            'rgba(75, 192, 192, 1)',
                            'rgba(255, 99, 132, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });
        }

        async function updateCurrentPrice() {
            const symbol = document.getElementById('result-symbol').textContent;
            try {
                const response = await fetch(`/get_current_price?symbol=${symbol}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                if (data.error) {
                    throw new Error(data.error);
                }
                document.getElementById('result-current-price').textContent = data.current_price.toFixed(2);


                chart.data.datasets[0].data[0] = data.current_price;
                chart.update();
            } catch (error) {
                console.error('Error updating price:', error);
            }
        }

        function showError(message) {
            console.error('Error:', message);
            errorText.textContent = message;
            errorMessage.classList.remove('hidden');
            results.classList.add('hidden');
            loading.classList.add('hidden');
        }


        updateWatchlist();
    </script>
</body>
</html>

================
File: templates/email.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verify Email</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { transform: translateX(-50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes gradientFlow {
            0% { background-position: 0 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0 50%; }
        }

        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientFlow 15s ease infinite;
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-out;
        }

        .animate-slide-in {
            animation: slideIn 0.5s ease-out;
        }

        .input-transition {
            transition: all 0.3s ease;
        }

        .input-transition:focus {
            transform: scale(1.02);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
        }

        .button-transition {
            transition: all 0.3s ease;
        }

        .button-transition:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .glass-effect {
            background: rgba(255, 255, 255, 0.25);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center">
    <div class="glass-effect p-8 rounded-lg w-96 animate-fade-in">
        <h2 class="text-2xl font-bold mb-4 animate-slide-in text-white">Verify Your Email</h2>
        <p class="mb-4 animate-slide-in text-white" style="animation-delay: 0.1s;">We've sent a verification code to your email. Please enter it below:</p>
        <form method="POST">
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.2s;">
                <label for="otp" class="block text-white">Verification Code</label>
                <input type="text" id="otp" name="otp" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder" autocomplete="off" aria-labelledby="otpLabel">
            </div>
            <button type="submit" class="w-full bg-white bg-opacity-20 text-white py-2 rounded hover:bg-opacity-30 button-transition animate-slide-in" style="animation-delay: 0.3s;">Verify Email</button>
        </form>
        <div class="mt-4 text-center animate-fade-in" style="animation-delay: 0.4s;">
            <button class="text-white hover:underline button-transition">Resend Code</button>
        </div>
    </div>
</body>
</html>

================
File: templates/login.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { transform: translateX(-50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes gradientFlow {
            0% { background-position: 0 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0 50%; }
        }

        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientFlow 15s ease infinite;
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-out;
        }

        .animate-slide-in {
            animation: slideIn 0.5s ease-out;
        }

        .input-transition {
            transition: all 0.3s ease;
        }

        .input-transition:focus {
            transform: scale(1.02);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
        }

        .button-transition {
            transition: all 0.3s ease;
        }

        .button-transition:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .glass-effect {
            background: rgba(255, 255, 255, 0.25);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center">
    <div class="glass-effect p-8 rounded-lg w-96 animate-fade-in">
        <h2 class="text-2xl font-bold mb-4 animate-slide-in text-white">Login</h2>
        <form method="POST">
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.1s;">
                <label for="username" class="block text-white">Username</label>
                <input type="text" id="username" name="username" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
            </div>
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.2s;">
                <label for="password" class="block text-white">Password</label>
                <input type="password" id="password" name="password" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
            </div>
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.3s;">
                <label for="otp" class="block text-white">2FA Code</label>
                <input type="text" id="otp" name="otp" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
            </div>
            <button type="submit" class="w-full bg-white bg-opacity-20 text-white py-2 rounded hover:bg-opacity-30 button-transition animate-slide-in" style="animation-delay: 0.4s;">Login</button>
        </form>
        <p class="mt-4 text-center animate-fade-in text-white" style="animation-delay: 0.5s;">
            Don't have an account? <a href="{{ url_for('signup') }}" class="text-white hover:underline">Sign up</a>
        </p>
    </div>
</body>
</html>

================
File: templates/signup.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { transform: translateX(-50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes gradientFlow {
            0% { background-position: 0 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0 50%; }
        }

        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientFlow 15s ease infinite;
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-out;
        }

        .animate-slide-in {
            animation: slideIn 0.5s ease-out;
        }

        .input-transition {
            transition: all 0.3s ease;
        }

        .input-transition:focus {
            transform: scale(1.02);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
        }

        .button-transition {
            transition: all 0.3s ease;
        }

        .button-transition:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .glass-effect {
            background: rgba(255, 255, 255, 0.25);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center">
    <div class="glass-effect p-8 rounded-lg w-96 animate-fade-in">
        <h2 class="text-2xl font-bold mb-4 animate-slide-in text-white">Sign Up</h2>
        <form method="POST">
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.1s;">
                <label for="username" class="block text-white">Username</label>
                <input type="text" id="username" name="username" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
            </div>
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.2s;">
                <label for="email" class="block text-white">Email Address</label>
                <input type="email" id="email" name="email" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
            </div>
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.3s;">
                <label for="password" class="block text-white">Password</label>
                <input type="password" id="password" name="password" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
            </div>
            <button type="submit" class="w-full bg-white bg-opacity-20 text-white py-2 rounded hover:bg-opacity-30 button-transition animate-slide-in" style="animation-delay: 0.4s;">Sign Up</button>
        </form>
        <p class="mt-4 text-center animate-fade-in text-white" style="animation-delay: 0.5s;">
            Already have an account? <a href="{{ url_for('login') }}" class="text-white hover:underline">Login</a>
        </p>
    </div>
</body>
</html>

================
File: templates/twofa.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Set Up Two-Factor Authentication</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { transform: translateX(-50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes gradientFlow {
            0% { background-position: 0 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0 50%; }
        }

        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientFlow 15s ease infinite;
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-out;
        }

        .animate-slide-in {
            animation: slideIn 0.5s ease-out;
        }

        .input-transition {
            transition: all 0.3s ease;
        }

        .input-transition:focus {
            transform: scale(1.02);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
        }

        .button-transition {
            transition: all 0.3s ease;
        }

        .button-transition:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .glass-effect {
            background: rgba(255, 255, 255, 0.25);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center">
    <div class="glass-effect p-8 rounded-lg w-96 animate-fade-in">
        <h2 class="text-2xl font-bold mb-4 animate-slide-in text-white">Set Up Two-Factor Authentication</h2>
        <p class="mb-4 animate-slide-in text-white" style="animation-delay: 0.1s;">Scan this QR code with your Google Authenticator app:</p>
        <img src="data:image/png;base64,{{ qr_code }}" alt="QR Code" class="mx-auto mb-4 animate-fade-in" style="animation-delay: 0.2s;">
        <p class="mb-4 animate-slide-in text-white" style="animation-delay: 0.3s;">Or enter this secret key manually: <strong class="text-yellow-300">{{ secret }}</strong></p>
        <form method="POST">
            <div class="mb-4 animate-slide-in" style="animation-delay: 0.4s;">
                <label for="otp" class="block text-white">Enter the 6-digit code from your app:</label>
                <input type="text" id="otp" name="otp" required class="w-full px-3 py-2 border rounded input-transition bg-white bg-opacity-20 text-white placeholder-white::placeholder">
            </div>
            <button type="submit" class="w-full bg-white bg-opacity-20 text-white py-2 rounded hover:bg-opacity-30 button-transition animate-slide-in" style="animation-delay: 0.5s;">Confirm and Complete Setup</button>
        </form>
    </div>
</body>
</html>

================
File: app.py
================
import logging
from flask import Flask, render_template, request, redirect, url_for, jsonify, session, flash
from flask_migrate import Migrate
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
#import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.src.models import Sequential
from keras.src.layers import LSTM, Dense, Dropout
from keras.src.optimizers import Adam
from keras.src.callbacks import EarlyStopping
import yfinance as yf
import re
from datetime import datetime, timedelta
import pytz
from flask_mail import Mail, Message
import pyotp
import qrcode
from io import BytesIO
import base64
import random
import string
from concurrent.futures import ThreadPoolExecutor
import time

logging.basicConfig(level=logging.INFO)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'predictthestocks@gmail.com'
app.config['MAIL_PASSWORD'] = 'iijv szgz pvuf aewb'
db = SQLAlchemy(app)
migrate = Migrate(app, db)
mail = Mail(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    is_verified = db.Column(db.Boolean, default=False)
    two_factor_secret = db.Column(db.String(32))

with app.app_context():
    db.create_all()


def generate_otp():
    return ''.join(random.choices(string.digits, k=6))

def send_verification_email(email, otp):
    msg = Message('Verify Your Email', sender=app.config['MAIL_USERNAME'], recipients=[email])
    msg.body = f'Your verification code is: {otp}'
    mail.send(msg)

def create_model(input_shape):
    model = Sequential([
        LSTM(64, return_sequences=True, input_shape=input_shape),
        Dropout(0.2),
        LSTM(64, return_sequences=False),
        Dropout(0.2),
        Dense(32, activation='relu'),
        Dense(1)
    ])
    model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')
    return model

def prepare_data(data, time_steps):
    X, y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:(i + time_steps)])
        y.append(data[i + time_steps])
    return np.array(X), np.array(y)

def validate_stock_symbol(symbol):
    pattern = r'^[A-Z]{1,5}(\.[A-Z]{1,2})?$'
    return re.match(pattern, symbol) is not None

@app.route('/')
def home():
    if 'user_id' in session:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))


@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
            flash('Username or email already exists')
            return redirect(url_for('signup'))

        hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
        new_user = User(username=username, email=email, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()

        otp = generate_otp()
        send_verification_email(email, otp)
        session['email'] = email
        session['otp'] = otp

        return redirect(url_for('verify_email'))

    return render_template('signup.html')


@app.route('/email', methods=['GET', 'POST'])
def verify_email():
    if 'email' not in session:
        return redirect(url_for('signup'))

    if request.method == 'POST':
        user_otp = request.form['otp']
        if user_otp == session['otp']:
            user = User.query.filter_by(email=session['email']).first()
            user.is_verified = True
            db.session.commit()
            session.pop('otp', None)
            return redirect(url_for('setup_2fa'))
        else:
            flash('Invalid OTP. Please try again.')

    return render_template('email.html')


@app.route('/twofa', methods=['GET', 'POST'])
def setup_2fa():
    if 'email' not in session:
        return redirect(url_for('login'))

    user = User.query.filter_by(email=session['email']).first()

    if request.method == 'POST':
        otp = request.form['otp']
        if pyotp.TOTP(user.two_factor_secret).verify(otp):
            session.pop('email', None)
            session['user_id'] = user.id
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid OTP. Please try again.')

    if not user.two_factor_secret:
        user.two_factor_secret = pyotp.random_base32()
        db.session.commit()

    totp = pyotp.TOTP(user.two_factor_secret)
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(totp.provisioning_uri(user.email, issuer_name="YourApp"))
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    buffered = BytesIO()
    img.save(buffered, "PNG")
    qr_code = base64.b64encode(buffered.getvalue()).decode()

    return render_template('twofa.html', qr_code=qr_code, secret=user.two_factor_secret)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        otp = request.form.get('otp')

        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            if not user.is_verified:
                flash('Please verify your email first.')
                return redirect(url_for('login'))

            if pyotp.TOTP(user.two_factor_secret).verify(otp):
                session['user_id'] = user.id
                return redirect(url_for('dashboard'))
            else:
                flash('Invalid 2FA code. Please try again.')
        else:
            flash('Invalid username or password')

    return render_template('login.html')


@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('login'))


@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    return render_template('dashboard.html')


stock_cache = {}
executor = ThreadPoolExecutor(max_workers=5)

def fetch_stock_data(symbol):
    try:
        stock = yf.Ticker(symbol)
        ny_time = datetime.now(pytz.timezone('America/New_York'))
        is_market_open = 9 <= ny_time.hour < 16 and ny_time.weekday() < 5

        if is_market_open:
            current_price = stock.info['regularMarketPrice']
        else:
            last_trading_day = ny_time.date()
            if ny_time.weekday() >= 5:
                last_trading_day -= timedelta(days=ny_time.weekday() - 4)
            hist = stock.history(start=last_trading_day)
            if not hist.empty:
                current_price = hist['Close'].iloc[-1]
            else:
                return None

        return {
            "symbol": symbol,
            "current_price": current_price,
            "market_status": "open" if is_market_open else "closed",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logging.error(f"Error fetching data for {symbol}: {str(e)}")
        return None

def update_stock_data():
    while True:
        futures = {executor.submit(fetch_stock_data, symbol): symbol for symbol in list(stock_cache.keys())}
        for future in futures:
            symbol = futures[future]
            try:
                data = future.result()
                if data:
                    stock_cache[symbol] = data
            except Exception as e:
                logging.error(f"Error updating {symbol}: {str(e)}")
        time.sleep(60)

@app.route('/get_current_price', methods=['GET'])
def get_current_price():
    symbol = request.args.get('symbol')

    if not symbol or not validate_stock_symbol(symbol):
        return jsonify({"error": "Invalid stock symbol"}), 400

    cached_data = stock_cache.get(symbol)
    if cached_data and (datetime.now() - datetime.fromisoformat(cached_data['timestamp'])).total_seconds() < 60:
        return jsonify(cached_data)

    data = fetch_stock_data(symbol)
    if data:
        stock_cache[symbol] = data
        return jsonify(data)
    else:
        return jsonify({"error": "Unable to fetch stock data"}), 500

@app.route('/get_price_and_predict', methods=['POST'])
def get_price_and_predict():
    try:
        symbol = request.form.get('symbol', '').upper()

        if not validate_stock_symbol(symbol):
            raise ValueError('Invalid stock symbol format')

        ticker = yf.Ticker(symbol)
        data = ticker.history(period="5y")

        if data.empty:
            raise ValueError(f'No data found for the symbol: {symbol}')

        now = datetime.now(pytz.timezone('US/Eastern'))
        market_open = now.replace(hour=9, minute=30, second=0, microsecond=0)
        market_close = now.replace(hour=16, minute=0, second=0, microsecond=0)
        is_weekday = now.weekday() < 5

        if is_weekday and market_open <= now <= market_close:
            market_status = "open"
        else:
            market_status = "closed"

        current_price = data['Close'].iloc[-1]

        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

        time_steps = 60
        X, y = prepare_data(scaled_data, time_steps)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        model = create_model((time_steps, 1))
        early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
        model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test), callbacks=[early_stopping], verbose=0)

        last_sequence = scaled_data[-time_steps:].reshape(1, -1, 1)
        predicted_price = model.predict(last_sequence)
        predicted_price = scaler.inverse_transform(predicted_price)[0][0]

        profit_percentage = ((predicted_price - current_price) / current_price) * 100

        if profit_percentage > 2:
            recommendation = "BUY"
        elif profit_percentage < -2:
            recommendation = "SELL"
        else:
            recommendation = "HOLD"

        return jsonify({
            'symbol': symbol,
            'current_price': float(current_price),
            'predicted_price': float(predicted_price),
            'profit_percentage': float(profit_percentage),
            'recommendation': recommendation,
            'market_status': market_status,
            'last_trading_time': data.index[-1].strftime('%Y-%m-%d %H:%M:%S %Z')
        })

    except Exception as e:
        logging.error(f"Error processing request: {str(e)}", exc_info=True)
        return jsonify({'error': str(e)}), 400

if __name__ == '__main__':
    executor.submit(update_stock_data)
    app.run(debug=False)

